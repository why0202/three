{"version":3,"sources":["components/Header.js","serviceWorker.js","components/Main.js","index.js"],"names":["Header","porps","className","src","React","Component","Boolean","window","location","hostname","match","SubMenu","Menu","Main","toggleCollapsed","setState","collapsed","state","list1","list2","arr","map","item","index","Item","key","style","width","type","onClick","this","marginBottom","defaultSelectedKeys","defaultOpenKeys","mode","theme","inlineCollapsed","title","rfor","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAuBeA,G,0BAnBX,WAAYC,GAAO,qEACTA,I,sEAIN,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,OACX,yBAAKC,IAAI,2EAEb,yBAAKD,UAAU,OACX,gDACI,uBAAGA,UAAU,uC,GAbhBE,IAAMC,YCSPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCdEC,EAAYC,IAAZD,QAyEOE,E,YAtEX,WAAYZ,GAAO,IAAD,8BACd,4CAAMA,KAOVa,gBAAkB,WACd,EAAKC,SAAS,CACZC,WAAY,EAAKC,MAAMD,aARxB,EAAKC,MAAQ,CACVD,WAAW,EACXE,MAAM,CAAC,2BAAO,2BAAO,2BAAO,MAAM,2BAAO,2BAAO,2BAAO,2BAAO,2BAAO,4BACrEC,MAAM,CAAC,2BAAO,6BALJ,E,kEAabC,GACD,OAAOA,EAAIC,IAAI,SAACC,EAAKC,GAAN,OACX,kBAAC,IAAKC,KAAN,CAAWC,IAAKF,GAAQD,O,+BAI5B,OACI,yBAAKpB,UAAU,QACX,yBAAKA,UAAU,OACf,yBAAKwB,MAAO,CAAEC,MAAO,MAC7B,kBAAC,IAAD,CAAQC,KAAK,UAAUC,QAASC,KAAKhB,gBAAiBY,MAAO,CAAEK,aAAc,KAC3E,kBAAC,IAAD,CAAMH,KAAME,KAAKb,MAAMD,UAAY,cAAgB,eAErD,kBAAC,IAAD,CACEgB,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,QAClBC,KAAK,SACLC,MAAM,OACNC,gBAAiBN,KAAKb,MAAMD,WAI5B,kBAACL,EAAD,CACEc,IAAI,OACJY,MACE,8BACE,kBAAC,IAAD,CAAMT,KAAK,SACX,4DAIDE,KAAKQ,KAAKR,KAAKb,MAAMC,QAG1B,kBAACP,EAAD,CACEc,IAAI,OACJY,MACE,8BACE,kBAAC,IAAD,CAAMT,KAAK,aACX,4DAIDE,KAAKQ,KAAKR,KAAKb,MAAME,WAMpB,yBAAKjB,UAAU,a,GA/DZE,IAAMC,W,OCCzBkC,IAASC,OAET,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGJC,SAASC,eAAe,SFmHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f42f5de7.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Header.css';\r\nimport '../Iconfont/iconfont.css'\r\nclass Header extends React.Component {\r\n    constructor(porps){\r\n        super(porps);\r\n \r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"h_l\">\r\n                    <img src='http://stu.1000phone.net/Public/assets/css/images/logo.png?1565695884'></img>\r\n                </div>\r\n                <div className=\"h_r\">\r\n                    <a>武红艳\r\n                        <i className=\"iconfont  icon-xialajiantou\"></i>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport '../css/Main.css';\r\n\r\nimport {  Menu,Icon, Button } from 'antd';\r\nconst { SubMenu } = Menu;\r\n\r\nclass Main extends React.Component {\r\n    constructor(porps){\r\n        super(porps);\r\n         this.state = {\r\n            collapsed: false,\r\n            list1:['匿名投诉','技术问题','项目上传','VIP','学员周报','学员周报','交费明细','参加考试','学员评价','教学测评'],\r\n            list2:['学员请假','学员违纪']\r\n          };\r\n    }\r\n    toggleCollapsed = () => {\r\n        this.setState({\r\n          collapsed: !this.state.collapsed,\r\n        });\r\n      };\r\n    rfor(arr){\r\n        return arr.map((item,index)=>\r\n            <Menu.Item key={index}>{item}</Menu.Item>    \r\n        )\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"m_l\">\r\n                <div style={{ width: 190 }}>\r\n        <Button type=\"primary\" onClick={this.toggleCollapsed} style={{ marginBottom: 16 }}>\r\n          <Icon type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'} />\r\n        </Button>\r\n        <Menu\r\n          defaultSelectedKeys={['1']}\r\n          defaultOpenKeys={['sub1']}\r\n          mode=\"inline\"\r\n          theme=\"dark\"\r\n          inlineCollapsed={this.state.collapsed}\r\n        >\r\n         \r\n          \r\n          <SubMenu\r\n            key=\"sub1\"\r\n            title={\r\n              <span>\r\n                <Icon type=\"mail\" />\r\n                <span>学员后台</span>\r\n              </span>\r\n            }\r\n          >\r\n              {this.rfor(this.state.list1)}\r\n           \r\n          </SubMenu>\r\n          <SubMenu\r\n            key=\"sub2\"\r\n            title={\r\n              <span>\r\n                <Icon type=\"appstore\" />\r\n                <span>学员考勤</span>\r\n              </span>\r\n            }\r\n          >\r\n              {this.rfor(this.state.list2)}\r\n           \r\n          </SubMenu>\r\n        </Menu>\r\n      </div>\r\n                </div>\r\n                <div className=\"m_r\">\r\n                 \r\n                   \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Main","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Header from './components/Header';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './components/Main';\nimport 'antd/dist/antd.css';\nReactDOM.render(\n\n<div>\n    <Header /> \n    <Main></Main>\n</div>,\n\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}